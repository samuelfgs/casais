// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sAm7j9mZDvyUmEcguggAEZ
// Component: GuyG08-Cxz2f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: MkhwwcjTHS98/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sAm7j9mZDvyUmEcguggAEZ/projectcss
import sty from "./PlasmicDesktop6.module.css"; // plasmic-import: GuyG08-Cxz2f/css

import MarkerIcon from "./icons/PlasmicIcon__Marker"; // plasmic-import: YW6sjaLFknpv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: h_0_6QYFY5gx/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram"; // plasmic-import: dvykUVSLK6Hm/icon

createPlasmicElementProxy;

export type PlasmicDesktop6__VariantMembers = {};
export type PlasmicDesktop6__VariantsArgs = {};
type VariantPropType = keyof PlasmicDesktop6__VariantsArgs;
export const PlasmicDesktop6__VariantProps = new Array<VariantPropType>();

export type PlasmicDesktop6__ArgsType = {};
type ArgPropType = keyof PlasmicDesktop6__ArgsType;
export const PlasmicDesktop6__ArgProps = new Array<ArgPropType>();

export type PlasmicDesktop6__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultDesktop6Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDesktop6__RenderFunc(props: {
  variants: PlasmicDesktop6__VariantsArgs;
  args: PlasmicDesktop6__ArgsType;
  overrides: PlasmicDesktop6__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedImage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__y5Su6
        )}
      >
        {"Hotel Monte Real"}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kdTyw)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lh6Q4)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p9Vh1)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pXbX5
              )}
            >
              {
                "Nosso retiro ser\u00e1 realizado no Hotel Monte Real, em \u00c1guas de Lind\u00f3ia / S\u00e3o Paulo. "
              }
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__xce2L)}
              color={"softSand"}
              link={"https://maps.app.goo.gl/vYinCvgjpfUdpBo87"}
              showStartIcon={true}
              startIcon={
                <MarkerIcon
                  className={classNames(projectcss.all, sty.svg__yOFn)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__adoR
                )}
              >
                {"Endere\u00e7o"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__yrqe)}
              color={"softSand"}
              link={"https://www.instagram.com/hotelmontereal/"}
              showStartIcon={true}
              startIcon={
                <InstagramIcon
                  className={classNames(projectcss.all, sty.svg__prcgw)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3WTza
                )}
              >
                {"Instagram"}
              </div>
            </Button>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hvsfe)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__tczsN)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            height={"200px"}
            loading={"lazy"}
            src={(() => {
              try {
                return `https://casais.vercel.app/plasmic/casais/images/hotel${$state.selectedImage}.jpg`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/casais/images/hotel1.jpg",
                    fullWidth: 522,
                    fullHeight: 348,
                    aspectRatio: undefined
                  };
                }
                throw e;
              }
            })()}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t6OQc)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [1, 2, 3, 4, 5];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__qaZcx)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSelectedImage"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedImage"]
                            },
                            operation: 0,
                            value: currentItem
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedImage"] != null &&
                      typeof $steps["updateSelectedImage"] === "object" &&
                      typeof $steps["updateSelectedImage"].then === "function"
                    ) {
                      $steps["updateSelectedImage"] = await $steps[
                        "updateSelectedImage"
                      ];
                    }
                  }}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__btp6X)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return `https://casais.vercel.app/plasmic/casais/images/hotel${currentItem}.jpg`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/casais/images/hotel2.jpg",
                            fullWidth: 522,
                            fullHeight: 348,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              );
            })}
          </Stack__>
        </Stack__>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["updateSelectedImage"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["selectedImage"]
                    },
                    operation: 0,
                    value: (() => {
                      return setInterval(() => {
                        $state.selectedImage = 1 + ($state.selectedImage % 5);
                      }, 2500);
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSelectedImage"] != null &&
              typeof $steps["updateSelectedImage"] === "object" &&
              typeof $steps["updateSelectedImage"].then === "function"
            ) {
              $steps["updateSelectedImage"] = await $steps[
                "updateSelectedImage"
              ];
            }
          }}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesktop6__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesktop6__VariantsArgs;
    args?: PlasmicDesktop6__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesktop6__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDesktop6__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDesktop6__ArgProps,
          internalVariantPropNames: PlasmicDesktop6__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDesktop6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesktop6";
  } else {
    func.displayName = `PlasmicDesktop6.${nodeName}`;
  }
  return func;
}

export const PlasmicDesktop6 = Object.assign(
  // Top-level PlasmicDesktop6 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicDesktop6
    internalVariantProps: PlasmicDesktop6__VariantProps,
    internalArgProps: PlasmicDesktop6__ArgProps
  }
);

export default PlasmicDesktop6;
/* prettier-ignore-end */
