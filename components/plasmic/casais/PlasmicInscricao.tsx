// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sAm7j9mZDvyUmEcguggAEZ
// Component: Sg4ECxtshw6E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FormItem from "../../FormItem"; // plasmic-import: D_-29DFy6get/component
import Separator from "../../Separator"; // plasmic-import: fpGcqQ82peL5/component
import Button from "../../Button"; // plasmic-import: MkhwwcjTHS98/component
import Loading from "../../Loading"; // plasmic-import: wIkzkfmPeBFp/component

import { useScreenVariants as useScreenVariantswbSvjcbuSqcK } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WbSvjcbuSqcK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sAm7j9mZDvyUmEcguggAEZ/projectcss
import sty from "./PlasmicInscricao.module.css"; // plasmic-import: Sg4ECxtshw6E/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 0-6OlSUyBVv6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: h_0_6QYFY5gx/icon

createPlasmicElementProxy;

export type PlasmicInscricao__VariantMembers = {};
export type PlasmicInscricao__VariantsArgs = {};
type VariantPropType = keyof PlasmicInscricao__VariantsArgs;
export const PlasmicInscricao__VariantProps = new Array<VariantPropType>();

export type PlasmicInscricao__ArgsType = {
  onSignup?: () => void;
  isLoading?: boolean;
};
type ArgPropType = keyof PlasmicInscricao__ArgsType;
export const PlasmicInscricao__ArgProps = new Array<ArgPropType>(
  "onSignup",
  "isLoading"
);

export type PlasmicInscricao__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  nome?: Flex__<typeof FormItem>;
  nascimento?: Flex__<typeof FormItem>;
  email?: Flex__<typeof FormItem>;
  doc?: Flex__<typeof FormItem>;
  telefone?: Flex__<typeof FormItem>;
  separator?: Flex__<typeof Separator>;
  nome2?: Flex__<typeof FormItem>;
  data2?: Flex__<typeof FormItem>;
  signup?: Flex__<typeof Button>;
  loading?: Flex__<typeof Loading>;
};

export interface DefaultInscricaoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInscricao__RenderFunc(props: {
  variants: PlasmicInscricao__VariantsArgs;
  args: PlasmicInscricao__ArgsType;
  overrides: PlasmicInscricao__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isLoading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nome.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nascimento.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "doc.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "telefone.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nome2.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data2.textInputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "validation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswbSvjcbuSqcK()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0FfHu)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kTyP)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__tIsZ)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "50px"
                    : "75px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/casais/images/logo3.png",
                  fullWidth: 414,
                  fullHeight: 433,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f0Z8P
                )}
              >
                {"N\u00f3s Dois"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__as2Ft)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uzNE
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Local do retiro:"}
                  </span>
                  <React.Fragment>
                    {" Hotel Monte Real / \u00c1guas de Lind\u00f3ia - SP"}
                  </React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0LmD3
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Data: "}
                  </span>
                  <React.Fragment>{"13 \u00e0 15 de dezembro"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {" "}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o1IpO
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Valor: "}
                  </span>
                  <React.Fragment>{"R$ 2200,00"}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c8Z6I
                )}
              >
                {"Ficou com alguma d\u00favida?"}
              </div>
              <Stack__
                as={PlasmicLink__}
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                hasGap={true}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={"https://wa.me/+5513991259404"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__pfJFt)}
                  displayHeight={"50px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"50px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/casais/images/image6.png",
                    fullWidth: 600,
                    fullHeight: 383,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yahxL
                  )}
                >
                  {"FALE CONOSCO"}
                </div>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__x0THa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fK8F
                )}
              >
                {"Inscri\u00e7\u00e3o"}
              </div>
            </div>
            {(() => {
              try {
                return !!$state.validation;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___3CUi6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mOknk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.validation;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__m1Yx1)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wSjot)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eorOd
                  )}
                >
                  {"Dados do titular"}
                </div>
                <FormItem
                  data-plasmic-name={"nome"}
                  data-plasmic-override={overrides.nome}
                  className={classNames("__wab_instance", sty.nome)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "nome",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "nome",
                    "textInputValue"
                  ])}
                />

                <FormItem
                  data-plasmic-name={"nascimento"}
                  data-plasmic-override={overrides.nascimento}
                  className={classNames("__wab_instance", sty.nascimento)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "nascimento",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "nascimento",
                    "textInputValue"
                  ])}
                >
                  {"Data de nascimento"}
                </FormItem>
                <FormItem
                  data-plasmic-name={"email"}
                  data-plasmic-override={overrides.email}
                  className={classNames("__wab_instance", sty.email)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "email",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "email",
                    "textInputValue"
                  ])}
                >
                  {"E-mail"}
                </FormItem>
                <FormItem
                  data-plasmic-name={"doc"}
                  data-plasmic-override={overrides.doc}
                  className={classNames("__wab_instance", sty.doc)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "doc",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "doc",
                    "textInputValue"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Noit
                    )}
                  >
                    {"Documento de identidade"}
                  </div>
                </FormItem>
                <FormItem
                  data-plasmic-name={"telefone"}
                  data-plasmic-override={overrides.telefone}
                  className={classNames("__wab_instance", sty.telefone)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "telefone",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "telefone",
                    "textInputValue"
                  ])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__diWhJ
                    )}
                  >
                    {"Telefone"}
                  </div>
                </FormItem>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox___8PHs)}>
                <Separator
                  data-plasmic-name={"separator"}
                  data-plasmic-override={overrides.separator}
                  className={classNames("__wab_instance", sty.separator)}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2Gvw)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hfOz
                  )}
                >
                  {"Dados do acompanhante"}
                </div>
                <FormItem
                  data-plasmic-name={"nome2"}
                  data-plasmic-override={overrides.nome2}
                  className={classNames("__wab_instance", sty.nome2)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "nome2",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "nome2",
                    "textInputValue"
                  ])}
                />

                <FormItem
                  data-plasmic-name={"data2"}
                  data-plasmic-override={overrides.data2}
                  className={classNames("__wab_instance", sty.data2)}
                  onTextInputValueChange={generateStateOnChangeProp($state, [
                    "data2",
                    "textInputValue"
                  ])}
                  textInputValue={generateStateValueProp($state, [
                    "data2",
                    "textInputValue"
                  ])}
                >
                  {"Data de nascimento"}
                </FormItem>
              </Stack__>
              <Button
                data-plasmic-name={"signup"}
                data-plasmic-override={overrides.signup}
                className={classNames("__wab_instance", sty.signup)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $props.onSignup({
                              nome: $state.nome.textInputValue,
                              nascimento: $state.nascimento.textInputValue,
                              email: $state.email.textInputValue,
                              doc: $state.doc.textInputValue,
                              telefone: $state.telefone.textInputValue,
                              nome2: $state.nome2.textInputValue,
                              nascimento2: $state.data2.textInputValue
                            });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateValidation"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["validation"]
                          },
                          operation: 0,
                          value: $steps.runCode
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateValidation"] != null &&
                    typeof $steps["updateValidation"] === "object" &&
                    typeof $steps["updateValidation"].then === "function"
                  ) {
                    $steps["updateValidation"] = await $steps[
                      "updateValidation"
                    ];
                  }
                }}
              >
                {"Confirmar"}
              </Button>
            </div>
          </Stack__>
          {(() => {
            try {
              return $props.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Loading
              data-plasmic-name={"loading"}
              data-plasmic-override={overrides.loading}
              className={classNames("__wab_instance", sty.loading)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "nome",
    "nascimento",
    "email",
    "doc",
    "telefone",
    "separator",
    "nome2",
    "data2",
    "signup",
    "loading"
  ],
  link: ["link"],
  nome: ["nome"],
  nascimento: ["nascimento"],
  email: ["email"],
  doc: ["doc"],
  telefone: ["telefone"],
  separator: ["separator"],
  nome2: ["nome2"],
  data2: ["data2"],
  signup: ["signup"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  nome: typeof FormItem;
  nascimento: typeof FormItem;
  email: typeof FormItem;
  doc: typeof FormItem;
  telefone: typeof FormItem;
  separator: typeof Separator;
  nome2: typeof FormItem;
  data2: typeof FormItem;
  signup: typeof Button;
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInscricao__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInscricao__VariantsArgs;
    args?: PlasmicInscricao__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInscricao__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInscricao__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInscricao__ArgProps,
          internalVariantPropNames: PlasmicInscricao__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInscricao__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInscricao";
  } else {
    func.displayName = `PlasmicInscricao.${nodeName}`;
  }
  return func;
}

export const PlasmicInscricao = Object.assign(
  // Top-level PlasmicInscricao renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    nome: makeNodeComponent("nome"),
    nascimento: makeNodeComponent("nascimento"),
    email: makeNodeComponent("email"),
    doc: makeNodeComponent("doc"),
    telefone: makeNodeComponent("telefone"),
    separator: makeNodeComponent("separator"),
    nome2: makeNodeComponent("nome2"),
    data2: makeNodeComponent("data2"),
    signup: makeNodeComponent("signup"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicInscricao
    internalVariantProps: PlasmicInscricao__VariantProps,
    internalArgProps: PlasmicInscricao__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInscricao;
/* prettier-ignore-end */
