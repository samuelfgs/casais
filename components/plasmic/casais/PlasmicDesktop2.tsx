// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sAm7j9mZDvyUmEcguggAEZ
// Component: 9FFQvMvxZbIZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: MkhwwcjTHS98/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sAm7j9mZDvyUmEcguggAEZ/projectcss
import sty from "./PlasmicDesktop2.module.css"; // plasmic-import: 9FFQvMvxZbIZ/css

import Folha2Icon from "./icons/PlasmicIcon__Folha2"; // plasmic-import: Xm67rv5XIDfl/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 0-6OlSUyBVv6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: h_0_6QYFY5gx/icon

createPlasmicElementProxy;

export type PlasmicDesktop2__VariantMembers = {};
export type PlasmicDesktop2__VariantsArgs = {};
type VariantPropType = keyof PlasmicDesktop2__VariantsArgs;
export const PlasmicDesktop2__VariantProps = new Array<VariantPropType>();

export type PlasmicDesktop2__ArgsType = {};
type ArgPropType = keyof PlasmicDesktop2__ArgsType;
export const PlasmicDesktop2__ArgProps = new Array<ArgPropType>();

export type PlasmicDesktop2__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultDesktop2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDesktop2__RenderFunc(props: {
  variants: PlasmicDesktop2__VariantsArgs;
  args: PlasmicDesktop2__ArgsType;
  overrides: PlasmicDesktop2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Folha2Icon
        className={classNames(projectcss.all, sty.svg__hypfd)}
        role={"img"}
      />

      <Folha2Icon
        className={classNames(projectcss.all, sty.svg__dumka)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__wf6KF)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2T01M)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yW0Ua)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i9GQj
              )}
            >
              {"Feito por casais"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___77FWk
              )}
            >
              {"Feito para casais"}
            </div>
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={"softSand"}
            link={`/inscricao`}
            shape={"rounded"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eqjG
              )}
            >
              {"QUERO PARTICIPAR"}
            </div>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lmZsw)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dg5ID
            )}
          >
            {"N\u00f3s Dois"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__coG5
            )}
          >
            {
              "Voc\u00ea e seu c\u00f4njuge est\u00e3o convidados para um retiro especial, onde a f\u00e9 e o amor se encontram em um ambiente acolhedor e inspirador. Este \u00e9 um momento \u00fanico para se desconectar da rotina di\u00e1ria e se reconectar com Deus e com o seu amor. Durante o retiro, teremos din\u00e2micas interativas, momentos de reflex\u00e3o e ensinamentos que fortalecer\u00e3o os la\u00e7os entre voc\u00eas.\n\nJunte-se a n\u00f3s para um final de semana repleto de aprendizado, ora\u00e7\u00e3o e crescimento m\u00fatuo. Ser\u00e1 uma oportunidade de compartilhar experi\u00eancias com outros casais, renovar seus votos e redescobrir a beleza da uni\u00e3o sob a luz da f\u00e9. N\u00e3o perca a chance de viver essa experi\u00eancia transformadora e cheia de b\u00ean\u00e7\u00e3os. "
            }
          </div>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesktop2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesktop2__VariantsArgs;
    args?: PlasmicDesktop2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesktop2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDesktop2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDesktop2__ArgProps,
          internalVariantPropNames: PlasmicDesktop2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDesktop2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesktop2";
  } else {
    func.displayName = `PlasmicDesktop2.${nodeName}`;
  }
  return func;
}

export const PlasmicDesktop2 = Object.assign(
  // Top-level PlasmicDesktop2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicDesktop2
    internalVariantProps: PlasmicDesktop2__VariantProps,
    internalArgProps: PlasmicDesktop2__ArgProps
  }
);

export default PlasmicDesktop2;
/* prettier-ignore-end */
