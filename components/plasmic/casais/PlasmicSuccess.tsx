// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sAm7j9mZDvyUmEcguggAEZ
// Component: UX-NN8BUpfNj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Mobile1 from "../../Mobile1"; // plasmic-import: V5wBCgG6NMHK/component
import Desktop1 from "../../Desktop1"; // plasmic-import: cAXqSs1VbbDV/component

import { useScreenVariants as useScreenVariantswbSvjcbuSqcK } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WbSvjcbuSqcK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sAm7j9mZDvyUmEcguggAEZ/projectcss
import sty from "./PlasmicSuccess.module.css"; // plasmic-import: UX-NN8BUpfNj/css

createPlasmicElementProxy;

export type PlasmicSuccess__VariantMembers = {};
export type PlasmicSuccess__VariantsArgs = {};
type VariantPropType = keyof PlasmicSuccess__VariantsArgs;
export const PlasmicSuccess__VariantProps = new Array<VariantPropType>();

export type PlasmicSuccess__ArgsType = {};
type ArgPropType = keyof PlasmicSuccess__ArgsType;
export const PlasmicSuccess__ArgProps = new Array<ArgPropType>();

export type PlasmicSuccess__OverridesType = {
  root?: Flex__<"div">;
  mobile1?: Flex__<typeof Mobile1>;
  desktop1?: Flex__<typeof Desktop1>;
};

export interface DefaultSuccessProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSuccess__RenderFunc(props: {
  variants: PlasmicSuccess__VariantsArgs;
  args: PlasmicSuccess__ArgsType;
  overrides: PlasmicSuccess__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswbSvjcbuSqcK()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Mobile1
            data-plasmic-name={"mobile1"}
            data-plasmic-override={overrides.mobile1}
            className={classNames("__wab_instance", sty.mobile1)}
          />

          <Desktop1
            data-plasmic-name={"desktop1"}
            data-plasmic-override={overrides.desktop1}
            className={classNames("__wab_instance", sty.desktop1)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mobile1", "desktop1"],
  mobile1: ["mobile1"],
  desktop1: ["desktop1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mobile1: typeof Mobile1;
  desktop1: typeof Desktop1;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSuccess__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSuccess__VariantsArgs;
    args?: PlasmicSuccess__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSuccess__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSuccess__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSuccess__ArgProps,
          internalVariantPropNames: PlasmicSuccess__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSuccess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuccess";
  } else {
    func.displayName = `PlasmicSuccess.${nodeName}`;
  }
  return func;
}

export const PlasmicSuccess = Object.assign(
  // Top-level PlasmicSuccess renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobile1: makeNodeComponent("mobile1"),
    desktop1: makeNodeComponent("desktop1"),

    // Metadata about props expected for PlasmicSuccess
    internalVariantProps: PlasmicSuccess__VariantProps,
    internalArgProps: PlasmicSuccess__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSuccess;
/* prettier-ignore-end */
